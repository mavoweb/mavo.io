{
	"term": [
		{
			"name": "+",
			"category": "math",
			"role": "operator",
			"description": "Addition",
			"argument": [
				{
					"optional": false
				}
			],
			"id": "+",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "-",
			"name": "-",
			"category": "math",
			"role": "operator",
			"description": "Subtraction",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "*",
			"name": "*",
			"category": "math",
			"role": "operator",
			"description": "Multiplication",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "/",
			"name": "/",
			"category": "math",
			"role": "operator",
			"description": "Division",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "<",
			"name": "<",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": ">",
			"name": ">",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "<=",
			"name": "<=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": ">=",
			"name": ">=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "=",
			"name": "=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "!=",
			"name": "!=",
			"category": "logical",
			"role": "operator",
			"description": "Check that a is *not* equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "!",
			"name": "!",
			"category": "logical",
			"role": "operator",
			"description": "Check if a does not have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": true,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "and",
			"id": "and",
			"category": "logical",
			"role": "operator",
			"argument": [
				{
					"optional": false
				}
			],
			"description": "Check that both a and b have a value",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "or",
			"id": "or",
			"category": "logical",
			"role": "operator",
			"description": "Check that at least a or b have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "where",
			"id": "where",
			"category": "lists",
			"role": "operator",
			"description": "Filter a based on b. Both a and b should be lists.\nFor example, `event where type = 'conference'` will return only events whose type is \"conference\".",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "&",
			"id": "&",
			"category": "text",
			"role": "operator",
			"description": "Join two pieces of text, e.g. 'cat' & 's' becomes 'cats'",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "..",
			"id": "..",
			"unary": false,
			"role": "operator",
			"description": "Create a list with numbers from a to b. Same as `range(a, b)`",
			"argument": [
				{
					"optional": false
				}
			],
			"category": "lists"
		},
		{
			"name": "if",
			"id": "if",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get a different value based on a test. For example, `if(rating > 3, 'good', 'bad')` returns `'good'` if the rating is bigger than 3 and `'bad'` otherwise.\nAny parameters can also be lists of values, in which case the `if()` is applied on each element individually (i.e. first the first element of each list, then the second, then the third etc).",
			"argument": [
				{
					"name": "test",
					"optional": false,
					"type": "Anything",
					"description": "The condition to test for. "
				},
				{
					"name": "iftrue",
					"optional": true,
					"type": "Anything",
					"description": "What to return if the test passes. Defaults to the test itself."
				},
				{
					"name": "iffalse",
					"optional": true,
					"type": "Anything",
					"description": "What to return if the test doesnâ€™t pass. Defaults to \"\" (empty text)."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "list",
			"id": "list",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Creates a list of values, just like the kind of thing you get when you use collection properties (or properties inside them).",
			"argument": [
				{
					"name": "value1",
					"optional": false,
					"description": "First value"
				},
				{
					"name": "value2",
					"optional": true,
					"description": "Second value"
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "List",
			"returnDescription": "A list with all values you provided.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "group",
			"id": "group",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Creates data that mimics the kind of data produced by a group. ",
			"argument": [
				{
					"name": "key1: value1",
					"optional": false,
					"type": "Key:value pair or group data",
					"description": "First key-value pair or other group data."
				},
				{
					"name": "key2: value2",
					"optional": true,
					"type": "Key:value pair or group data",
					"description": "Second key-value pair or other group data."
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "Group data",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "get",
			"id": "get",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Get a value of a group by key. For example, `get(group(bar:4), bar)` will return `4`.\nIf the first parameter is a collection, all values of the given key are returned. For example, `get(list(group(id:\"foo\", name:\"fooname\"), group(id:\"bar\", name:\"barname\")), name)` returns `list(\"fooname\", \"barname\")`.\nIf the first parameter is a collection and the second parameter is in the form `\"key=value\"`, then the group(s) that satisfies this condition will be returned as a list. For example, `get(list(group(id:\"foo\", name:\"fooname\"), group(id:\"bar\", name:\"barname\")), \"name=fooname\")` returns `list(group(id:\"foo\", name:\"fooname\"))`.\nYou can attach a **key** to the end of `get()` with a `.` operator to get the value of a key. For example, `get(list(group(id:\"foo\", name:\"fooname\"), group(id:\"bar\", name:\"barname\")), \"id=foo\").name` returns `\"fooname\"`.",
			"argument": [
				{
					"name": "object",
					"optional": false,
					"type": "Group or List of Groups",
					"description": "Where to look up keys and find values."
				},
				{
					"name": "key",
					"optional": false,
					"type": "Text",
					"description": "The key to look for or the condition to match if in the form `\"key=value\"`."
				}
			],
			"returnDescription": "Value of found key or a list of values if multiple keys are found. Returns a list of groups if the second parameter is \"key=value\". "
		},
		{
			"shown": [
				true,
				true,
				true
			],
			"name": "average",
			"id": "average",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the average of all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to average"
				}
			],
			"returnType": "Number",
			"returnDescription": "The average"
		},
		{
			"name": "median",
			"id": "median",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the median of all numbers in the list. New in v0.2.0.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to average"
				}
			],
			"returnType": "Number",
			"returnDescription": "The average",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "sum",
			"id": "sum",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Sum all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to sum"
				}
			],
			"returnType": "Number",
			"returnDescription": "The sum",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "min",
			"id": "min",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the minimum of all numbers in the list.\n`min()` also accepts multiple parameters of `Number` and returns the minimum number of all parameters. For example, `min(1, 2, 3)` will return `1`.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers you are trying to find the min of."
				}
			],
			"returnType": "Number",
			"returnDescription": "The minimum number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "max",
			"id": "max",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the maximum of all numbers in the list.\n`max()` also accepts multiple parameters of `Number` and returns the maximum number of all parameters. For example, `max(1, 2, 3)` will return `3`.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers you are trying to find the max of."
				}
			],
			"returnType": "Number",
			"returnDescription": "The maximum number"
		},
		{
			"name": "round",
			"id": "round",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Rounds a number to the nearest integer. If the `decimals` parameter is used, rounds a number to the nearest number of decimals.",
			"argument": [
				{
					"name": "number",
					"optional": false,
					"type": "Number",
					"description": "Number to be rounded."
				},
				{
					"name": "decimals",
					"optional": true,
					"type": "Number",
					"description": "Number of decimals the number will be rounded to."
				}
			],
			"returnType": "Number",
			"returnDescription": "The rounded number."
		},
		{
			"name": "digits",
			"id": "digits",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Returns a number with the specified number of digits and decimal places.\nFor example, `digits(2, 1234.5678)` will return `34.5678`, a number with 2 digits and the number of decimals unchanged. `digits(2, 3, 1234.5678)` will return `34.567`, a number with 2 digits and 3 decimals.\nIf `digits` or `decimals` parameter is larger than the number of digits or decimals the number has, the number will be padded with 0s. For example, `digits(4, 5, 12.345)` will return `0012.34500`.",
			"argument": [
				{
					"name": "digits",
					"optional": true,
					"type": "Number",
					"description": "Number of digits to keep. If `number` has fewer digits than the `digits` parameter, 0s will be padded before the number."
				},
				{
					"name": "decimals",
					"optional": true,
					"type": "Number",
					"description": "Number of decimal places to keep. If `number` has fewer decimals than the `decimals` parameter, 0s will be padded after the number's decimals."
				},
				{
					"name": "number",
					"optional": false,
					"type": "Number",
					"description": "Number to be changed."
				}
			],
			"returnType": "Number",
			"returnDescription": "New number with specified number of digits and decimal places."
		},
		{
			"name": "count",
			"category": "lists",
			"role": "function",
			"description": "Count how many items in a list actually have a value. Ignores 0, false, \"\", empty.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list of values to count."
				}
			],
			"returnType": "Number",
			"returnDescription": "The count",
			"id": "count",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "first",
			"id": "first",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the first item(s) in a list of values.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the first item. Otherwise, a list of the first n items.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "last",
			"id": "last",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the last item(s) in a list of values. \nFor example, assuming there is a collection with the name `event`, `last(event)` gets you the last event and `last(3, event)` gets you the last 3 events.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the last item. Otherwise, a list of the first n items.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "unique",
			"id": "unique",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Drops any duplicates, returning only the unique items from a list of values.\nFor example, `unique(list(1, 2, 1, 4, 4, 3, 2))` will return `list(1, 2, 3, 4)`.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List"
				}
			],
			"returnType": "List",
			"returnDescription": "A list of unique items."
		},
		{
			"name": "shuffle",
			"id": "shuffle",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Shuffle the list, i.e. randomize the order of items.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to shuffle."
				}
			],
			"returnDescription": "A new, shuffled version of the list provided.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "intersects",
			"id": "intersects",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Checks if two lists share one or more of the same item.\nFor example, `intersects(list(1, 2, 3), list(4, 3, 5))` will be true because both share the item `3`.",
			"argument": [
				{
					"name": "list1",
					"optional": false,
					"type": "List"
				},
				{
					"name": "list2",
					"optional": false,
					"type": "List"
				}
			],
			"returnDescription": "True if there is an intersection and false if not."
		},
		{
			"name": "reverse",
			"id": "reverse",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Reverse the order of list items.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List"
				}
			],
			"returnType": "List",
			"returnDescription": "A list with its item orders reversed."
		},
		{
			"name": "join",
			"id": "join",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Combine multiple values into one text value, optionally separated by a different text value.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The pieces you want to join"
				},
				{
					"name": "glue",
					"optional": true,
					"type": "Text",
					"description": "What to put between the joined pieces of text. Defaults to nothing, i.e. the pieces are just concatenated. Provide `', '` to get a comma-separated list."
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "split",
			"id": "split",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "The opposite of `join()`, this takes a text value and turns it into a list, by breaking it down at the specified separators.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to split."
				},
				{
					"name": "separator",
					"optional": true,
					"type": "Text",
					"description": "Where to split the text. Defaults to whitespace."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "between",
			"id": "between",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Finds two pieces of text and returns the text between them.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "from",
					"optional": false,
					"type": "Text",
					"description": "Text after this will be returned"
				},
				{
					"name": "to",
					"optional": false,
					"type": "Text",
					"description": "Text before this will be returned"
				},
				{
					"name": "tight",
					"optional": true,
					"type": "True or False",
					"description": "If true, the function will search \"from\" parameter from the end of the haystack and \"to\" parameter from the start of haystack. Useful when there are multiple occurrences of from or to and you want the shorter in-between text."
				}
			],
			"returnType": "Text",
			"returnDescription": "Text in between from and to"
		},
		{
			"name": "from",
			"id": "from",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Returns all texts after another bit of text.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for."
				}
			],
			"returnType": "Text",
			"returnDescription": "All texts after the needle."
		},
		{
			"name": "fromlast",
			"id": "fromlast",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Same as `from()` but searches for the needle starting with the **last** character of the haystack instead of the first.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for."
				}
			],
			"returnType": "Text",
			"returnDescription": "All texts after the needle."
		},
		{
			"name": "to",
			"id": "to",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Returns all texts before another bit of text.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for."
				}
			],
			"returnType": "Text",
			"returnDescription": "All texts before the needle."
		},
		{
			"name": "tolast",
			"id": "tolast",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Same as `to()` but searches for the needle starting with the **first** character of the haystack instead of the last.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for."
				}
			],
			"returnType": "Text",
			"returnDescription": "All texts before the needle."
		},
		{
			"name": "random",
			"id": "random",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Generate a random number.",
			"argument": [
				{
					"name": "min",
					"optional": true,
					"type": "Number",
					"description": "Minimum allowed number. Defaults to 0."
				},
				{
					"name": "max",
					"optional": true,
					"type": "Number",
					"description": "Maximum allowed number. Defaults to 100."
				},
				{
					"name": "step",
					"optional": true,
					"type": "Number",
					"description": "Step, i.e. allowed increment. Defaults to 1, which returns integers."
				}
			],
			"returnType": "Number",
			"returnDescription": "The random number.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "range",
			"id": "range",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Create a list with numbers starting from a and increasing one by one until b. E.g. `range(5)`, `range(1, 5)`, and range(1, 5, 1) all produce `list(1, 2, 3, 4, 5)`. If only a and b are needed, `range(a, b)` can also be written more succinctly as `a .. b`.",
			"argument": [
				{
					"name": "a",
					"optional": true,
					"type": "Number",
					"description": "The first number in the sequence. Defaults to 1 or -1 depending on whether b is positive or negative respectively."
				},
				{
					"name": "b",
					"optional": false,
					"type": "Number",
					"description": "The upper bound for the sequence. Please note that if `a` is not an integer, the last number in the sequence may not be equal to `b`. E.g. `range(.5, 2)` returns `list(0.5, 1.5)`."
				},
				{
					"name": "step",
					"optional": true,
					"type": "Number",
					"description": "The difference between consecutive numbers in the sequence. Defaults to 1 or -1 depending on the relative order of a and b. If the provided step would result in an infinite sequence, the result is a list with a as its only element. E.g. `range(1, 5, 0)` or `range(1, 3, -1)` both would return `list(1)`."
				}
			],
			"returnType": "List of numbers",
			"returnDescription": "The resulting sequence of numbers as a list"
		},
		{
			"name": "year",
			"id": "year",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the year of a date/time as a 4 digit number.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose year we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "month",
			"id": "month",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the month of a date/time as a number from 1 to 12. You can add `'name'` as the second parameter to get the month name (e.g. \"February\"). You can also use `'shortname'` to get a shorter name, like \"Feb\". Both of these are dependent on the document language.\nIf you want to display the month as a two digit number, add `'00'` as the second parameter. For example, `month(2019-02-01, '00')` returns `02`.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose month we want to get."
				},
				{
					"name": "format",
					"optional": true,
					"type": "Text",
					"description": "The way we want this month to be displayed."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "weekday",
			"id": "weekday",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 7. You can add `.name` to the returned value to get the weekday name (e.g. \"Monday\"), dependent on the document language.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose weekday we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "day",
			"id": "day",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 31.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose day we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "hour",
			"id": "hour",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the hour of a date/time as a number from 0 to 23.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Datetime",
					"description": "The date/time whose hour we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "minute",
			"id": "minute",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the minute of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose minute we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "second",
			"id": "second",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the seconds of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose seconds we want to get."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "date",
			"id": "date",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get a date (without time) in ISO format (e.g. 1986-13-06).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "time",
			"id": "time",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get a the time part of a date/time (without date information) in ISO format (e.g. 13:00).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "seconds",
			"id": "seconds",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of seconds. Essentially equivalent to dividing by 1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of seconds",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "minutes",
			"id": "minutes",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of minutes. Essentially equivalent to dividing by 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of minutes",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "hours",
			"id": "hours",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of hours. Essentially equivalent to dividing by 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of hours",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "days",
			"id": "days",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of days. Essentially equivalent to dividing by 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of days",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "weeks",
			"id": "weeks",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of weeks. Essentially equivalent to dividing by 7 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of weeks",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "months",
			"id": "months",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of months. Essentially equivalent to dividing by 30.4368 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of months",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "years",
			"id": "years",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of years. Essentially equivalent to dividing by 12 Ã— 30.4368 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of years",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "len",
			"id": "len",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Find the length in characters of a text value. E.g. len(\"foo\") is 3.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to measure"
				}
			],
			"returnType": "Number",
			"returnDescription": "The number of characters",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "idify",
			"id": "idify",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Convert text to something that looks like the ids we are more used to. For example, `idify(\"Chicken Liver PÃ¢tÃ©! ðŸ˜‹\")` returns `\"chicken-liver-pate\"`",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert"
				}
			],
			"returnType": "Text",
			"returnDescription": "The id",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "ordinal",
			"id": "ordinal",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Returns the ordinal indicator (st, nd, rd, th) of a given number.",
			"argument": [
				{
					"name": "number",
					"optional": false,
					"type": "Number",
					"description": "Number used to determine the ordinal character."
				}
			],
			"returnType": "Text",
			"returnDescription": "The ordinal indicator corresponding to the number."
		},
		{
			"name": "readable",
			"id": "readable",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "The opposite of `idify()`, this takes an id (either in camelCase, or in underscore_case, in hyphen-case, or even mixed) and tries its best to convert it to a readable label. For example, `readable(\"fooBar-baz\")` returns `\"Foo bar baz\"`.\nAlso used by Mavo internally to generate the editing UI from property names.",
			"argument": [
				{
					"name": "id",
					"optional": false,
					"type": "Text",
					"description": "The id-like text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The readable label.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "uppercase",
			"id": "uppercase",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Converts all letters to uppercase.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The converted text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "lowercase",
			"id": "lowercase",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Converts all letters to lowercase.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The converted text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "replace",
			"id": "replace",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Replaces all occurrences of a text with another text.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for."
				},
				{
					"name": "replacement",
					"optional": false,
					"type": "Text",
					"description": "Text that replaces needle."
				},
				{
					"name": "iterations",
					"optional": false,
					"type": "Number",
					"description": "Number of times search and replace is performed. Defaults to 1"
				}
			],
			"returnType": "Text"
		},
		{
			"name": "search",
			"id": "search",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Case-insensitive search",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnType": "Number",
			"returnDescription": "Position of the first match if found, or -1 if not found.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "contains",
			"id": "contains",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Check if a collection, group, list, or text contains another given text. For example, `contains(\"Kenneth\", \"Ken\")` returns `true`.\nIf both haystack and needle are a list, `contains()` checks if the first item of the haystack contains the first item of the needle, and so on, and returns a list of corresponding results. For example, `contains(list(\"Kenneth\", \"Verou\"), list(\"Ken\", \"Lea\"))` will return `list(true, false)`.",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Group, List, or Text",
					"description": "Where to look in."
				},
				{
					"name": "needle",
					"optional": false,
					"type": "List or Text",
					"description": "What to look for."
				}
			],
			"returnType": "True or False",
			"returnDescription": "True if the haystack contains the needle, false otherwise."
		},
		{
			"name": "starts",
			"id": "starts",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Check if text starts with another bit of text",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnDescription": "True if it does, false otherwise.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "ends",
			"id": "ends",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Check if text ends with another bit of text",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnDescription": "True if it does, false otherwise.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "url",
			"id": "url",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "If `param` is provided, returns the value of that parameter from the current page URL. This matches both parameters like `example.com/index.html?foo=bar` and `example.com/index.html/foo/bar` with the former having priority over the latter\nIf `param` is **not** provided, it returns the URL of the current page.",
			"argument": [
				{
					"name": "param",
					"optional": true,
					"type": "Text",
					"description": "The parameter to get."
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "filename",
			"id": "filename",
			"unary": false,
			"category": "other",
			"role": "function",
			"argument": [
				{
					"name": "URL",
					"optional": false,
					"type": "Text"
				}
			],
			"description": "Gets all texts after the rightmost slash of an URL. For example, `filename(\"https://mavo.io/docs/functions.html\")` will return `functions.html`.\nIf the parameter is not an URL, `filename()` will return the value of the parameter as-is.",
			"returnType": "Text",
			"returnDescription": "Text after the rightmost slash of an URL. Returns the value of the parameter as-is if not an URL."
		},
		{
			"name": "json",
			"id": "json",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Converts data to JSON.",
			"argument": [
				{
					"name": "data",
					"optional": false,
					"type": "Anything",
					"description": "Data to be converted to JSON."
				}
			],
			"returnType": "Text",
			"returnDescription": "The JSON."
		},
		{
			"name": "log",
			"id": "log",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Logs the result of all parameters to the browser console and returns the result of the first parameter of this function.\nFor example, `log(1 + 1, floor(3.5), true && false)` will return `2`, the result of the first parameter of `log()`. Additionally, when you open the browser console, `2 3 false` will be displayed.\nThis function is primarily for **advanced** Mavo users and developers. To debug your Mavo app, the [Mavo Inspector](https://chrome.google.com/webstore/detail/mavo-inspector/fcjdobllamgdbbjhhhpghnffideklgpa) Chrome extension may be more useful (works only with the development version of Mavo).",
			"argument": [
				{
					"optional": false,
					"name": "parameter1",
					"type": "Anything",
					"description": "The first parameter to be logged to the browser console."
				},
				{
					"name": "parameter2",
					"optional": false,
					"type": "Anything",
					"description": "The second parameter to be logged to the browser console."
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want."
				}
			],
			"returnDescription": "The result of the first parameter."
		},
		{
			"name": "$now",
			"category": "datetime",
			"role": "special",
			"description": "Current date and time as number of milliseconds since January 1st, 1970. Note that using `$now` in expressions makes them update automatically as `$now` changes. Mostly useful in conjunction with [date and time functions](?category=datetime) or the `mod` operator.",
			"argument": [
				{
					"optional": false
				}
			],
			"demo": "# Example: $now\n\nColor clock that circles all hues every minute.\n\n```html\n<div mv-app=colorClock  style=\"background: hsl([hue], 100%, 80%)\">\n\t<span property=\"hue\">[$now * 6 / 1000 mod 360]</span>\n\t<time>[time($now)]</time>\n</div>\n<style>\nbody {\n\tfont: bold 100% Helvetica Neue, sans-serif;\n\tmargin: 0;\n}\n\ndiv { \n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100vh;\n\tpadding: 1em;\n\tbox-sizing: border-box;\n}\n\ntime {\n\tfont-size: 500%;\n\tflex: 1;\n}\n\nspan {\n\topacity: .5;\n}\n</style>\n```",
			"id": "$now",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$startup",
			"id": "$startup",
			"unary": false,
			"category": "datetime",
			"role": "special",
			"description": "The value of `$now` when the page loaded.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$today",
			"id": "$today",
			"unary": false,
			"category": "datetime",
			"role": "special",
			"description": "Current date.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$hash",
			"id": "$hash",
			"unary": false,
			"category": "other",
			"role": "special",
			"description": "Current URL hash (without the `#` sign). Updates automatically when the hash changes.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$mouse",
			"id": "$mouse",
			"unary": false,
			"category": "other",
			"role": "special",
			"description": "Mouse coordinates relative to the viewport. Use `$mouse.x` and `$mouse.y` to get them.",
			"argument": [
				{
					"optional": false
				}
			],
			"demo": "# Example\n\n```html\n<div mv-app style=\"background: radial-gradient(at [$mouse.x]px [$mouse.y]px, white, black)\">\n\t[$mouse.x] [$mouse.y]\n</div>\n<style>\nbody {\n\tfont: bold 100% Helvetica Neue, sans-serif;\n\tmargin: 0;\n}\n\ndiv { \n\theight: 100vh;\n\tpadding: 1em;\n\tbox-sizing: border-box;\n}\n</style>\n```",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$index",
			"id": "$index",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s position in its collection, starting from 0.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$previous",
			"id": "$previous",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s previous item.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$next",
			"id": "$next",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s next item.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$item",
			"id": "$item",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest item. Same as using the property name.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$all",
			"id": "$all",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the collection (since the collection property will give you the current item)",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		}
	]
}