{
	"term": [
		{
			"name": "+",
			"category": "math",
			"role": "operator",
			"description": "Addition",
			"argument": [
				{
					"optional": false
				}
			],
			"id": "+",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "-",
			"name": "-",
			"category": "math",
			"role": "operator",
			"description": "Subtraction",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "*",
			"name": "*",
			"category": "math",
			"role": "operator",
			"description": "Multiplication",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "/",
			"name": "/",
			"category": "math",
			"role": "operator",
			"description": "Division",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "<",
			"name": "<",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": ">",
			"name": ">",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "<=",
			"name": "<=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": ">=",
			"name": ">=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "=",
			"name": "=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "!=",
			"name": "!=",
			"category": "logical",
			"role": "operator",
			"description": "Check that a is *not* equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"id": "!",
			"name": "!",
			"category": "logical",
			"role": "operator",
			"description": "Check if a does not have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": true,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "and",
			"id": "and",
			"category": "logical",
			"role": "operator",
			"argument": [
				{
					"optional": false
				}
			],
			"description": "Check that both a and b have a value",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "or",
			"id": "or",
			"category": "logical",
			"role": "operator",
			"description": "Check that at least a or b have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "where",
			"id": "where",
			"category": "lists",
			"role": "operator",
			"description": "Filter a based on b. Both a and b should be lists.\nFor example, `event where type = 'conference'` will return only events whose type is \"conference\".",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "&",
			"id": "&",
			"category": "text",
			"role": "operator",
			"description": "Join two pieces of text, e.g. 'cat' & 's' becomes 'cats'",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "if",
			"id": "if",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get a different value based on a test. For example, `if(rating > 3, 'good', 'bad')` returns `'good'` if the rating is bigger than 3 and `'bad'` otherwise.\nAny parameters can also be lists of values, in which case the `if()` is applied on each element individually (i.e. first the first element of each list, then the second, then the third etc).",
			"argument": [
				{
					"name": "test",
					"optional": false,
					"type": "Anything",
					"description": "The condition to test for. "
				},
				{
					"name": "iftrue",
					"optional": true,
					"type": "Anything",
					"description": "What to return if the test passes. Defaults to the test itself."
				},
				{
					"name": "iffalse",
					"optional": true,
					"type": "Anything",
					"description": "What to return if the test doesnâ€™t pass. Defaults to \"\" (empty text)."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "list",
			"id": "list",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Creates a list of values, just like the kind of thing you get when you use collection properties (or properties inside them).",
			"argument": [
				{
					"name": "value1",
					"optional": false,
					"description": "First value"
				},
				{
					"name": "value2",
					"optional": true,
					"description": "Second value"
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "List",
			"returnDescription": "A list with all values you provided.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "group",
			"id": "group",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Creates data that mimics the kind of data produced by a group. ",
			"argument": [
				{
					"name": "key1: value1",
					"optional": false,
					"type": "Key:value pair or group data",
					"description": "First key-value pair or other group data."
				},
				{
					"name": "key2: value2",
					"optional": true,
					"type": "Key:value pair or group data",
					"description": "Second key-value pair or other group data."
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "Group data",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "average",
			"id": "average",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the average of all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to average"
				}
			],
			"returnType": "Number",
			"returnDescription": "The average",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "sum",
			"id": "sum",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Sum all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to sum"
				}
			],
			"returnType": "Number",
			"returnDescription": "The sum",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "min",
			"id": "min",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the minimum of all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers you are trying to find the min of."
				}
			],
			"returnType": "Number",
			"returnDescription": "The minimum number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "random",
			"id": "random",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Generate a random number.",
			"argument": [
				{
					"name": "min",
					"optional": true,
					"type": "Number",
					"description": "Minimum allowed number. Defaults to 0."
				},
				{
					"name": "max",
					"optional": true,
					"type": "Number",
					"description": "Maximum allowed number. Defaults to 100."
				},
				{
					"name": "step",
					"optional": true,
					"type": "Number",
					"description": "Step, i.e. allowed increment. Defaults to 1, which returns integers."
				}
			],
			"returnType": "Number",
			"returnDescription": "The random number.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "count",
			"category": "lists",
			"role": "function",
			"description": "Count how many items in a list actually have a value. Ignores 0, false, \"\", empty.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list of values to count."
				}
			],
			"returnType": "Number",
			"returnDescription": "The count",
			"id": "count",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "first",
			"id": "first",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the first item(s) in a list of values.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the first item. Otherwise, a list of the first n items.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "last",
			"id": "last",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the last item(s) in a list of values. \nFor example, assuming there is a collection with the name `event`, `last(event)` gets you the last event and `last(3, event)` gets you the last 3 events.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the last item. Otherwise, a list of the first n items.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "shuffle",
			"id": "shuffle",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Shuffle the list, i.e. randomize the order of items.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to shuffle."
				}
			],
			"returnDescription": "A new, shuffled version of the list provided.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "join",
			"id": "join",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Combine multiple values into one text value, optionally separated by a different text value.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The pieces you want to join"
				},
				{
					"name": "glue",
					"optional": true,
					"type": "Text",
					"description": "What to put between the joined pieces of text. Defaults to nothing, i.e. the pieces are just concatenated. Provide `', '` to get a comma-separated list."
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "split",
			"id": "split",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "The opposite of `join()`, this takes a text value and turns it into a list, by breaking it down at the specified separators.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to split."
				},
				{
					"name": "separator",
					"optional": true,
					"type": "Text",
					"description": "Where to split the text. Defaults to whitespace."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "len",
			"id": "len",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Find the length in characters of a text value. E.g. len(\"foo\") is 3.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to measure"
				}
			],
			"returnType": "Number",
			"returnDescription": "The number of characters",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "idify",
			"id": "idify",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Convert text to something that looks like the ids we are more used to. For example, `idify(\"Chicken Liver PÃ¢tÃ©! ðŸ˜‹\")` returns `\"chicken-liver-pate\"`",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert"
				}
			],
			"returnType": "Text",
			"returnDescription": "The id",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "readable",
			"id": "readable",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "The opposite of `idify()`, this takes an id (either in camelCase, or in underscore_case, in hyphen-case, or even mixed) and tries its best to convert it to a readable label. For example, `readable(\"fooBar-baz\")` returns `\"Foo bar baz\"`.\nAlso used by Mavo internally to generate the editing UI from property names.",
			"argument": [
				{
					"name": "id",
					"optional": false,
					"type": "Text",
					"description": "The id-like text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The readable label.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "uppercase",
			"id": "uppercase",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Converts all letters to uppercase.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The converted text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "lowercase",
			"id": "lowercase",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Converts all letters to lowercase.",
			"argument": [
				{
					"name": "text",
					"optional": false,
					"type": "Text",
					"description": "The text to convert."
				}
			],
			"returnType": "Text",
			"returnDescription": "The converted text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "search",
			"id": "search",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Case-insensitive search",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnType": "Number",
			"returnDescription": "Position of the first match if found, or -1 if not found.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "starts",
			"id": "starts",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Check if text starts with another bit of text",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnDescription": "True if it does, false otherwise.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "ends",
			"id": "ends",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Check if text ends with another bit of text",
			"argument": [
				{
					"name": "haystack",
					"optional": false,
					"type": "Text",
					"description": "Text to look in"
				},
				{
					"name": "needle",
					"optional": false,
					"type": "Text",
					"description": "Text to look for"
				}
			],
			"returnDescription": "True if it does, false otherwise.",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "url",
			"id": "url",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "If `param` is provided, returns the value of that parameter from the current page URL. This matches both parameters like `example.com/index.html?foo=bar` and `example.com/index.html/foo/bar` with the former having priority over the latter\nIf `param` is **not** provided, it returns the URL of the current page.",
			"argument": [
				{
					"name": "param",
					"optional": true,
					"type": "Text",
					"description": "The parameter to get."
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "year",
			"id": "year",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the year of a date/time as a 4 digit number.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose year we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "month",
			"id": "month",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the month of a date/time as a number from 1 to 12. You can add `.name` to the returned value to get the month name (e.g. \"February\"). You can also use `.shortname` to get a shorter name, like \"Feb\". Both of these are dependent on the document language.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose month we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "weekday",
			"id": "weekday",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 7. You can add `.name` to the returned value to get the weekday name (e.g. \"Monday\"), dependent on the document language.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose weekday we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "day",
			"id": "day",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 31.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose day we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "hour",
			"id": "hour",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the hour of a date/time as a number from 0 to 23.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Datetime",
					"description": "The date/time whose hour we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "minute",
			"id": "minute",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the minute of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose minute we want to get."
				}
			],
			"returnType": "Number",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "second",
			"id": "second",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get the seconds of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose seconds we want to get."
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "date",
			"id": "date",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get a date (without time) in ISO format (e.g. 1986-13-06).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "time",
			"id": "time",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Get a the time part of a date/time (without date information) in ISO format (e.g. 13:00).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "seconds",
			"id": "seconds",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of seconds. Essentially equivalent to dividing by 1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of seconds",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "minutes",
			"id": "minutes",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of minutes. Essentially equivalent to dividing by 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of minutes",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "hours",
			"id": "hours",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of hours. Essentially equivalent to dividing by 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of hours",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "days",
			"id": "days",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of days. Essentially equivalent to dividing by 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of days",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "weeks",
			"id": "weeks",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of weeks. Essentially equivalent to dividing by 7 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of weeks",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "months",
			"id": "months",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of months. Essentially equivalent to dividing by 30.4368 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of months",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "years",
			"id": "years",
			"unary": false,
			"category": "datetime",
			"role": "function",
			"description": "Converts a number of milliseconds to a number of years. Essentially equivalent to dividing by 12 Ã— 30.4368 Ã— 24 Ã— 60 Ã— 60 Ã—1000 and then rounding down.",
			"argument": [
				{
					"name": "ms",
					"optional": false,
					"type": "Number",
					"description": "Number of milliseconds"
				}
			],
			"returnType": "Number",
			"returnDescription": "Number of years",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$now",
			"category": "datetime",
			"role": "special",
			"description": "Current date and time as number of milliseconds since January 1st, 1970. Note that using `$now` in expressions makes them update automatically as `$now` changes. Mostly useful in conjunction with [date and time functions](?category=datetime) or the `mod` operator.",
			"argument": [
				{
					"optional": false
				}
			],
			"demo": "# Example: $now\n\nColor clock that circles all hues every minute.\n\n```html\n<div mv-app=colorClock  style=\"background: hsl([hue], 100%, 80%)\">\n\t<span property=\"hue\">[$now * 6 / 1000 mod 360]</span>\n\t<time>[time($now)]</time>\n</div>\n<style>\nbody {\n\tfont: bold 100% Helvetica Neue, sans-serif;\n\tmargin: 0;\n}\n\ndiv { \n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100vh;\n\tpadding: 1em;\n\tbox-sizing: border-box;\n}\n\ntime {\n\tfont-size: 500%;\n\tflex: 1;\n}\n\nspan {\n\topacity: .5;\n}\n</style>\n```",
			"id": "$now",
			"unary": false,
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$startup",
			"id": "$startup",
			"unary": false,
			"category": "datetime",
			"role": "special",
			"description": "The value of `$now` when the page loaded.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$today",
			"id": "$today",
			"unary": false,
			"category": "datetime",
			"role": "special",
			"description": "Current date.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$hash",
			"id": "$hash",
			"unary": false,
			"category": "other",
			"role": "special",
			"description": "Current URL hash (without the `#` sign). Updates automatically when the hash changes.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$mouse",
			"id": "$mouse",
			"unary": false,
			"category": "other",
			"role": "special",
			"description": "Mouse coordinates relative to the viewport. Use `$mouse.x` and `$mouse.y` to get them.",
			"argument": [
				{
					"optional": false
				}
			],
			"demo": "# Example\n\n```html\n<div mv-app style=\"background: radial-gradient(at [$mouse.x]px [$mouse.y]px, white, black)\">\n\t[$mouse.x] [$mouse.y]\n</div>\n<style>\nbody {\n\tfont: bold 100% Helvetica Neue, sans-serif;\n\tmargin: 0;\n}\n\ndiv { \n\theight: 100vh;\n\tpadding: 1em;\n\tbox-sizing: border-box;\n}\n</style>\n```",
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$index",
			"id": "$index",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s position in its collection, starting from 0.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$previous",
			"id": "$previous",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s previous item.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$next",
			"id": "$next",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest itemâ€™s next item.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$item",
			"id": "$item",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the closest item. Same as using the property name.",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		},
		{
			"name": "$all",
			"id": "$all",
			"unary": false,
			"category": "lists",
			"role": "special",
			"description": "If inside a collection, the collection (since the collection property will give you the current item)",
			"argument": [
				{
					"optional": false
				}
			],
			"shown": [
				true,
				true,
				true
			]
		}
	]
}