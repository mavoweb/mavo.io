{
	"question": "Why are you not using data-* attributes?",
	"answer": "We love standards, and we struggled with this one a lot. Originally, Mavo was using `data-` attributes. However, we use a lot of attributes, so just using a `data-` prefix meant our attributes would likely collide with attributes from libraries that may be included on the same page or even `data-` attributes that the page author has defined for styling purposes. Also, if we are just using a `data-` prefix, it's not obvious which attributes are Mavo's and which ones are not. We _could_ use a `data-mv-` prefix, but that is very verbose and would make Mavo code harder to read since half of it would be the same attribute prefix repeated over and over. So, we chose `mv-` whose only drawback is theoretical purity: it causes absolutely no problems with anything, but as of right now, it will not pass HTML validation. [And even that may be changing](https://github.com/whatwg/html/issues/2271).\n\n**We do support `data-mv-` versions of all our `mv-` attributes, but they are static**: they are converted to `mv-` attributes when Mavo starts and never read back. However, they work fine for most cases, and they can help you pass an HTML validator, if required.\n\nLastly, we designed Mavo to prototype a future where HTML can be used to create web applications. Our vision is that one day, some or all of its functionality will be supported natively by browsers, and then its attribute prefix will certainly not be `data-`.",
	"id": "attribute-names",
	"questions": [
		{
			"question": "Why are you not using data-* attributes?",
			"answer": "We love standards, and we struggled with this one a lot. Originally, Mavo was using `data-` attributes. However, we use a lot of attributes, so just using a `data-` prefix meant our attributes would likely collide with attributes from libraries that may be included on the same page or even `data-` attributes that the page author has defined for styling purposes. Also, if we are just using a `data-` prefix, it's not obvious which attributes are Mavo's and which ones are not. We _could_ use a `data-mv-` prefix, but that is very verbose and would make Mavo code harder to read since half of it would be the same attribute prefix repeated over and over. So, we chose `mv-` whose only drawback is theoretical purity: it causes absolutely no problems with anything, but as of right now, it will not pass HTML validation. [And even that may be changing](https://github.com/whatwg/html/issues/2271).\n\n**We do support `data-mv-` versions of all our `mv-` attributes, but they are static**: they are converted to `mv-` attributes when Mavo starts and never read back. However, they work fine for most cases, and they can help you pass an HTML validator, if required.\n\nLastly, we designed Mavo to prototype a future where HTML can be used to create web applications. Our vision is that one day, some or all of its functionality will be supported natively by browsers, and then its attribute prefix will certainly not be `data-`.",
			"id": "attribute-names"
		},
		{
			"question": "Why property and not mv-property?",
			"answer": "Mavo tries to use a standardized attribute when one is appropriate. The reason `property`, `typeof` and `datatype` attributes are not prefixed with `mv-` is simply because Mavo did not invent them: they actually come from [RDFa](https://www.w3.org/TR/rdfa-primer/), a W3C technology for enhancing the semantic richness of HTML with information about _what the data is_. Since Mavo needs the same kind of information about the page, why reinvent these attributes?\n\nDon’t worry, you don’t need to know one iota of RDFa to use Mavo! However, if you do, you may be interested in knowing that all Mavo apps are valid RDFa on runtime and Mavo will even store data in [JSON-LD](http://json-ld.org/) if you provide a `vocab` attribute.",
			"id": "why-property"
		},
		{
			"question": "Isn’t this basically Angular 1.x?",
			"answer": "Nope. There are some superficial similarities between Mavo and Angular, namely:\n\n1. They both have some HTML-based syntax\n2. They both support expressions.\n\nHowever, Angular was never designed with the goal of writing apps entirely in HTML. It treats HTML as a shortcut for data binding to views, but everything else is expected to be written in JavaScript. For example, persistence or editability needs to be coded from scratch, just like with every other JavaScript framework. That does not make Angular worse; it has a different scope and a different target group. Angular is more low level, so it can produce a broader set of applications, but requires more effort and more learning.",
			"id": "angular"
		},
		{
			"question": "What about search engines?",
			"answer": "Despite what you may have been told, **Google _does_ index dynamically generated content**. Here is a sample of articles about this:\n\n*   [Understanding web pages better (Official Google blog)](https://webmasters.googleblog.com/2014/05/understanding-web-pages-better.html)\n*   [Does Google crawl dynamic content?](https://centrical.com/test/google-json-ld-and-javascript-crawling-and-indexing-test.html)\n*   [We Tested How Googlebot Crawls Javascript And Here’s What We Learned](http://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157)\n*   [Google Gives Update On Crawling JavaScript Sites & Progressive Web Apps](https://www.seroundtable.com/google-on-crawling-javascript-sites-progressive-web-apps-21737.html)\n\nOther search engines are likely to follow suit, if they haven’t done so already.",
			"id": "seo"
		},
		{
			"question": "How can I get rid of the Mavo toolbar?",
			"answer": "All UI generated by Mavo is customizable, including the Mavo toolbar! [You can find out how in the docs](http://mavo.io/docs/ui/).",
			"id": "how-can-i-get-rid-of-the-mavo-toolbar"
		}
	]
}
